import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import DarkModeToggle from '../components/DarkModeToggle';
import Toast from '../components/Toast';
import LoginModal from '../components/LoginModal';
import UserProfile from '../components/UserProfile';
import { useAuth } from '../contexts/AuthContext';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

function StepAIBot({ project, currentStepIndex, previousSteps, isDarkMode }) {
  const chatKey = `chat-${project.title}-${currentStepIndex}`;
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [fileContent, setFileContent] = useState('');
  const [process, setProcess] = useState('');
  const [showFeedback, setShowFeedback] = useState({});
  const [feedbackText, setFeedbackText] = useState('');
  const chatEndRef = useRef(null);
  const [isRecording, setIsRecording] = useState(false);
  const recognitionRef = useRef(null);

  // Persistent chat history
  useEffect(() => {
    const saved = localStorage.getItem(chatKey);
    setMessages(saved ? JSON.parse(saved) : []);
    setInput('');
    setFileContent('');
    setProcess('');
    fetchProcess();
  }, [chatKey]);

  useEffect(() => {
    localStorage.setItem(chatKey, JSON.stringify(messages));
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages, chatKey]);

  // Step-specific AI process guide
  async function fetchProcess() {
    try {
      const response = await fetch('http://localhost:5050/api/ai-step-help', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          project,
          currentStepIndex,
          previousSteps,
          userQuestion: 'Provide a detailed step-by-step process guide for completing this step. Include best practices, common pitfalls to avoid, and implementation tips.'
        })
      });
      const data = await response.json();
      if (data.success) setProcess(data.answer);
    } catch (error) {
      console.error('Failed to fetch process:', error);
    }
  }

  // Download process as PDF
  const downloadProcessPDF = () => {
    const content = `
# Step ${currentStepIndex + 1} Process Guide - ${project.title}

## Step Overview
${typeof project.steps[currentStepIndex] === 'string' ? project.steps[currentStepIndex] : project.steps[currentStepIndex].title}

## Detailed Process
${process}

## Additional Notes
- Take your time with each sub-step
- Test frequently as you implement
- Don't hesitate to ask for help if you get stuck
- Remember: this is a learning journey, not a race!

---
Generated by BuildNow AI Learning Platform
Step completed on: ${new Date().toLocaleDateString()}
    `;

    // Create a simple HTML for PDF conversion
    const htmlContent = `
      <html>
        <head>
          <title>Step ${currentStepIndex + 1} Process Guide</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #7c3aed; border-bottom: 2px solid #7c3aed; padding-bottom: 10px; }
            h2 { color: #4338ca; margin-top: 30px; }
            pre { background: #f3f4f6; padding: 15px; border-radius: 8px; overflow-x: auto; }
            code { background: #e5e7eb; padding: 2px 4px; border-radius: 4px; }
          </style>
        </head>
        <body>${content.replace(/\n/g, '<br>').replace(/##/g, '<h2>').replace(/<h2>/g, '</p><h2>').replace(/<\/h2>/g, '</h2><p>')}</body>
      </html>
    `;

    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `step-${currentStepIndex + 1}-process-guide.html`;
    a.click();
    URL.revokeObjectURL(url);
  };

  // Voice input
  const startVoiceInput = () => {
    if (!('webkitSpeechRecognition' in window)) return;
    setIsRecording(true);
    const recognition = new window.webkitSpeechRecognition();
    recognition.lang = 'en-US';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onresult = (event) => {
      setInput(event.results[0][0].transcript);
      setIsRecording(false);
    };
    recognition.onerror = () => setIsRecording(false);
    recognition.onend = () => setIsRecording(false);
    recognition.start();
    recognitionRef.current = recognition;
  };
  
  const stopVoiceInput = () => {
    if (recognitionRef.current) recognitionRef.current.stop();
    setIsRecording(false);
  };

  // File/code upload
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (ev) => setFileContent(ev.target.result);
    reader.readAsText(file);
  };

  // Multi-turn context: send full chat to backend
  const sendMessage = async () => {
    if (!input.trim() && !fileContent) return;
    const userMessage = { sender: 'user', text: input, file: fileContent };
    setMessages((msgs) => [...msgs, userMessage]);
    setInput('');
    setFileContent('');
    setIsLoading(true);
    try {
      const response = await fetch('http://localhost:5050/api/ai-step-help', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          project,
          currentStepIndex,
          previousSteps,
          userQuestion: userMessage.text + (userMessage.file ? `\n\nHere is my code/file:\n${userMessage.file}` : ''),
          chatHistory: messages
        })
      });
      const data = await response.json();
      if (data.success) {
        setMessages((msgs) => [...msgs, { sender: 'ai', text: data.answer, feedback: null }]);
      } else {
        setMessages((msgs) => [...msgs, { sender: 'ai', text: 'Sorry, I could not answer your question right now.', feedback: null }]);
      }
    } catch {
      setMessages((msgs) => [...msgs, { sender: 'ai', text: 'Sorry, there was an error contacting the AI.', feedback: null }]);
    } finally {
      setIsLoading(false);
    }
  };

  // Feedback for AI answers
  const handleFeedback = (idx, value) => {
    setShowFeedback((f) => ({ ...f, [idx]: value }));
  };
  
  const handleFeedbackText = (idx, text) => {
    setFeedbackText(text);
    // Optionally send feedback to backend here
  };

  // Download chat as markdown
  const downloadChat = () => {
    let md = `# AI Chat for ${project.title} - Step ${currentStepIndex + 1}\n`;
    messages.forEach((msg) => {
      if (msg.sender === 'user') {
        md += `\n**You:** ${msg.text}\n`;
        if (msg.file) md += `\n\`\`\`\n${msg.file}\n\`\`\`\n`;
      } else {
        md += `\n**AI:** ${msg.text}\n`;
      }
    });
    const blob = new Blob([md], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-chat-step${currentStepIndex + 1}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className={`mt-8 mb-4 rounded-xl shadow-lg border ${isDarkMode ? 'bg-gray-800/90 border-gray-700' : 'bg-white/90 border-gray-200'} backdrop-blur-lg`}> 
      <div className="p-6">
        <h3 className={`font-semibold mb-4 flex items-center gap-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
          <svg className="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
          🔄 Step Process Guide
        </h3>
        
        {process && (
          <div className={`mb-6 p-4 rounded-lg ${isDarkMode ? 'bg-blue-900/30 border border-blue-800/30' : 'bg-blue-50 border border-blue-200'}`}>
            <div className="flex items-start justify-between mb-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">📋</span>
                <b className={isDarkMode ? 'text-blue-200' : 'text-blue-900'}>Process Guide:</b>
              </div>
              <button
                onClick={downloadProcessPDF}
                className={`px-3 py-1 rounded-lg text-xs font-medium transition-all flex items-center gap-2 ${
                  isDarkMode ? 'bg-blue-700 text-blue-200 hover:bg-blue-600' : 'bg-blue-600 text-white hover:bg-blue-700'
                }`}
              >
                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Download PDF
              </button>
            </div>
            <div className={`prose max-w-none ${isDarkMode ? 'prose-invert' : ''}`}>
              <ReactMarkdown remarkPlugins={[remarkGfm]}>{process}</ReactMarkdown>
            </div>
          </div>
        )}

        <div className="flex flex-wrap gap-2 mb-4">
          <button 
            onClick={downloadChat} 
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-all flex items-center gap-2 ${
              isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Download Chat
          </button>
          <label className={`px-4 py-2 rounded-lg text-sm font-medium cursor-pointer transition-all flex items-center gap-2 ${
            isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}>
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            Upload Code
            <input type="file" className="hidden" onChange={handleFileChange} />
          </label>
          <button
            type="button"
            onClick={isRecording ? stopVoiceInput : startVoiceInput}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-all flex items-center gap-2 ${
              isRecording 
                ? 'bg-red-600 text-white hover:bg-red-700' 
                : isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 18v2m0-2a4 4 0 004-4V8a4 4 0 10-8 0v6a4 4 0 004 4zm0 0v2m-6 0h12" />
            </svg>
            {isRecording ? 'Stop Recording' : 'Voice Input'}
          </button>
        </div>
        <div className="max-h-64 overflow-y-auto space-y-2 mb-2 bg-transparent">
          {messages.length === 0 && (
            <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>Ask any question about this step and the AI will help you!</div>
          )}
          {messages.map((msg, idx) => (
            <div key={idx} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`rounded-lg px-3 py-2 max-w-xs whitespace-pre-line break-words ${
                msg.sender === 'user'
                  ? isDarkMode ? 'bg-purple-700 text-white' : 'bg-purple-200 text-purple-900'
                  : isDarkMode ? 'bg-gray-800 text-green-200' : 'bg-green-100 text-green-900'
              }`}>
                {msg.sender === 'ai' ? (
                  <ReactMarkdown remarkPlugins={[remarkGfm]}>{msg.text}</ReactMarkdown>
                ) : (
                  <span>{msg.text}</span>
                )}
                {msg.file && (
                  <pre className="mt-2 text-xs bg-gray-900 text-white rounded p-2 overflow-x-auto">{msg.file}</pre>
                )}
                {/* Feedback for AI answers */}
                {msg.sender === 'ai' && (
                  <div className="mt-2 flex gap-2 items-center">
                    <button
                      className={`text-lg ${showFeedback[idx] === 'up' ? 'text-green-500' : 'text-gray-400'} hover:text-green-600`}
                      onClick={() => handleFeedback(idx, 'up')}
                    >👍</button>
                    <button
                      className={`text-lg ${showFeedback[idx] === 'down' ? 'text-red-500' : 'text-gray-400'} hover:text-red-600`}
                      onClick={() => handleFeedback(idx, 'down')}
                    >👎</button>
                    {showFeedback[idx] && (
                      <input
                        type="text"
                        className={`ml-2 px-2 py-1 rounded text-xs border ${isDarkMode ? 'bg-gray-800 text-white border-gray-700' : 'bg-white border-gray-300 text-gray-900'}`}
                        placeholder="Optional feedback..."
                        value={feedbackText}
                        onChange={e => handleFeedbackText(idx, e.target.value)}
                      />
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
          <div ref={chatEndRef} />
        </div>
        <form
          className="flex gap-3 mt-4"
          onSubmit={e => {
            e.preventDefault();
            sendMessage();
          }}
        >
          <input
            type="text"
            className={`flex-1 rounded-lg px-4 py-3 border text-sm transition-all ${
              isDarkMode 
                ? 'bg-gray-700 text-white border-gray-600 focus:border-purple-500 focus:bg-gray-600' 
                : 'bg-white border-gray-300 text-gray-900 focus:border-purple-500 focus:bg-gray-50'
            } focus:outline-none focus:ring-2 focus:ring-purple-500/20`}
            placeholder="Ask the AI for help with this step..."
            value={input}
            onChange={e => setInput(e.target.value)}
            disabled={isLoading}
          />
          <button
            type="submit"
            className={`px-6 py-3 rounded-lg font-medium text-sm transition-all flex items-center gap-2 ${
              isDarkMode ? 'bg-purple-600 text-white hover:bg-purple-700' : 'bg-purple-600 text-white hover:bg-purple-700'
            } disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-xl`}
            disabled={isLoading || (!input.trim() && !fileContent)}
          >
            {isLoading ? (
              <>
                <svg className="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Thinking...
              </>
            ) : (
              <>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
                Send
              </>
            )}
          </button>
        </form>
        {fileContent && (
          <div className={`mt-3 p-3 rounded-lg border-l-4 border-blue-500 ${
            isDarkMode ? 'bg-blue-900/30 text-blue-200' : 'bg-blue-50 text-blue-800'
          }`}>
            <div className="flex items-center gap-2 mb-1">
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span className="text-sm font-medium">File ready to send</span>
            </div>
            <pre className={`text-xs font-mono p-2 rounded ${
              isDarkMode ? 'bg-gray-800 text-gray-300' : 'bg-white text-gray-700'
            } overflow-x-auto max-h-20`}>
              {fileContent.slice(0, 200)}{fileContent.length > 200 ? '\n...' : ''}
            </pre>
          </div>
        )}
      </div>
    </div>
  );
}

// Expandable Resource Card Component
function ExpandableResourceCard({ item, isDarkMode }) {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <div 
      className={`p-4 rounded-lg border cursor-pointer transition-all duration-300 ${
        isDarkMode 
          ? 'bg-gray-600/30 border-gray-600 hover:bg-gray-600/50' 
          : 'bg-white border-gray-200 hover:shadow-md'
      } ${isExpanded ? 'ring-2 ring-purple-500/30' : ''}`}
      onClick={() => setIsExpanded(!isExpanded)}
    >
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <h4 className={`font-medium mb-2 ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}>
            {item.title}
          </h4>
          <p className={`text-sm mb-3 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
            {item.description}
          </p>
        </div>
        <div className="flex-shrink-0 ml-3">
          <svg 
            className={`w-5 h-5 transition-transform duration-300 ${
              isExpanded ? 'rotate-180' : ''
            } ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </div>
      
      {isExpanded && (
        <div className="mt-4 pt-4 border-t border-gray-300/20 animate-fade-in">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {item.resources && item.resources.map((resource, resourceIndex) => (
              <a
                key={resourceIndex}
                href={resource.url}
                target="_blank"
                rel="noopener noreferrer"
                onClick={(e) => e.stopPropagation()}
                className={`inline-flex items-center gap-2 px-3 py-2 text-sm rounded-lg transition-all hover:scale-105 shadow-sm ${
                  resource.type === 'YouTube'
                    ? (isDarkMode ? 'bg-red-900/50 text-red-300 hover:bg-red-800/50' : 'bg-red-100 text-red-800 hover:bg-red-200')
                    : resource.type === 'Website'
                    ? (isDarkMode ? 'bg-blue-900/50 text-blue-300 hover:bg-blue-800/50' : 'bg-blue-100 text-blue-800 hover:bg-blue-200')
                    : resource.type === 'Documentation'
                    ? (isDarkMode ? 'bg-green-900/50 text-green-300 hover:bg-green-800/50' : 'bg-green-100 text-green-800 hover:bg-green-200')
                    : resource.type === 'Course'
                    ? (isDarkMode ? 'bg-purple-900/50 text-purple-300 hover:bg-purple-800/50' : 'bg-purple-100 text-purple-800 hover:bg-purple-200')
                    : (isDarkMode ? 'bg-gray-600 text-gray-300 hover:bg-gray-500' : 'bg-gray-200 text-gray-700 hover:bg-gray-300')
                }`}
              >
                {/* Resource Type Icons */}
                {resource.type === 'YouTube' && (
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
                  </svg>
                )}
                {resource.type === 'Website' && (
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                  </svg>
                )}
                {resource.type === 'Documentation' && (
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                )}
                {resource.type === 'Course' && (
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                  </svg>
                )}
                <span className="font-medium truncate">{resource.title}</span>
                <span className="text-xs opacity-75 flex-shrink-0">({resource.duration || '5 min'})</span>
              </a>
            ))}
          </div>
          
          {/* Additional resource details if expanded */}
          <div className="mt-3 pt-3 border-t border-gray-300/10">
            <div className="flex items-center justify-between text-xs">
              <span className={`px-2 py-1 rounded ${
                (item.importance || 'Helpful') === 'Essential' 
                  ? 'bg-red-100 text-red-800' 
                  : (item.importance || 'Helpful') === 'Important'
                  ? 'bg-yellow-100 text-yellow-800'
                  : 'bg-green-100 text-green-800'
              }`}>
                {item.importance || 'Helpful'}
              </span>
              <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>
                Est. time: {item.estimatedTime || '5-15 min'}
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// Corner Chatbot Component
function CornerChatbot({ project, isDarkMode, completedSteps }) {
  const [isOpen, setIsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState('chatbot');
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [files, setFiles] = useState([]);

  const sendMessage = async () => {
    if (!input.trim() && files.length === 0) return;
    
    const userMessage = { sender: 'user', text: input, files: files };
    setMessages((msgs) => [...msgs, userMessage]);
    setInput('');
    setFiles([]);
    setIsLoading(true);

    try {
      let apiEndpoint = '';
      let requestBody = {};

      if (activeTab === 'chatbot') {
        apiEndpoint = 'http://localhost:5050/api/ai-step-help';
        requestBody = {
          project,
          userQuestion: input,
          chatHistory: messages
        };
      } else {
        // Project checker tab
        apiEndpoint = 'http://localhost:5050/api/ai-step-help';
        requestBody = {
          project,
          completedSteps: Array.from(completedSteps),
          userQuestion: `Please check my project progress and provide feedback. User input: ${input}`,
          files: files,
          chatHistory: messages
        };
      }

      const response = await fetch(apiEndpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      const data = await response.json();
      if (data.success) {
        setMessages((msgs) => [...msgs, { sender: 'ai', text: data.answer }]);
             } else {
         setMessages((msgs) => [...msgs, { sender: 'ai', text: 'Sorry, I could not process your request right now.' }]);
       }
     } catch {
       setMessages((msgs) => [...msgs, { sender: 'ai', text: 'Sorry, there was an error processing your request.' }]);
     } finally {
      setIsLoading(false);
    }
  };

  const handleFileUpload = (e) => {
    const uploadedFiles = Array.from(e.target.files);
    setFiles(prev => [...prev, ...uploadedFiles]);
  };

  return (
    <>
      {/* Floating Chat Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className={`w-14 h-14 rounded-full shadow-lg transition-all duration-300 flex items-center justify-center ${
            isDarkMode 
              ? 'bg-purple-600 hover:bg-purple-700' 
              : 'bg-purple-600 hover:bg-purple-700'
          } text-white ${isOpen ? 'rotate-180' : 'hover:scale-110'}`}
        >
          {isOpen ? (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          ) : (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
          )}
        </button>
      </div>

      {/* Chat Popup */}
      {isOpen && (
        <div className={`fixed bottom-24 right-6 w-96 h-[500px] rounded-xl shadow-2xl z-40 ${
          isDarkMode ? 'bg-gray-800 border border-gray-700' : 'bg-white border border-gray-200'
        } backdrop-blur-lg`}>
          {/* Header with Tabs */}
          <div className={`p-4 border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
            <div className="flex space-x-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
              <button
                onClick={() => setActiveTab('chatbot')}
                className={`flex-1 py-2 px-3 rounded-md text-sm font-medium transition-all ${
                  activeTab === 'chatbot'
                    ? 'bg-white dark:bg-gray-600 text-purple-600 dark:text-purple-400 shadow-sm'
                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200'
                }`}
              >
                🤖 AI Assistant
              </button>
              <button
                onClick={() => setActiveTab('checker')}
                className={`flex-1 py-2 px-3 rounded-md text-sm font-medium transition-all ${
                  activeTab === 'checker'
                    ? 'bg-white dark:bg-gray-600 text-purple-600 dark:text-purple-400 shadow-sm'
                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200'
                }`}
              >
                ✅ Project Checker
              </button>
            </div>
          </div>

          {/* Chat Messages */}
          <div className="flex-1 overflow-y-auto p-4 h-80">
            {messages.length === 0 && (
              <div className={`text-sm text-center ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                {activeTab === 'chatbot' 
                  ? 'Ask me anything about your project! 💡' 
                  : 'Upload files or describe your progress for project feedback! 📊'
                }
              </div>
            )}
            {messages.map((msg, idx) => (
              <div key={idx} className={`mb-3 flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-xs rounded-lg px-3 py-2 text-sm ${
                  msg.sender === 'user'
                    ? 'bg-purple-600 text-white'
                    : isDarkMode ? 'bg-gray-700 text-gray-200' : 'bg-gray-100 text-gray-900'
                }`}>
                  {msg.text}
                  {msg.files && msg.files.length > 0 && (
                    <div className="mt-2">
                      {msg.files.map((file, fileIdx) => (
                        <div key={fileIdx} className="text-xs opacity-75">
                          📎 {file.name}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex justify-start">
                <div className={`rounded-lg px-3 py-2 text-sm ${isDarkMode ? 'bg-gray-700 text-gray-200' : 'bg-gray-100 text-gray-900'}`}>
                  <div className="flex items-center space-x-1">
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Input Area */}
          <div className={`p-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
            {/* File Upload for Project Checker */}
            {activeTab === 'checker' && (
              <div className="mb-3">
                <label className={`block w-full p-2 text-center border-2 border-dashed rounded-lg cursor-pointer transition-colors ${
                  isDarkMode 
                    ? 'border-gray-600 hover:border-purple-500 text-gray-400 hover:text-purple-400' 
                    : 'border-gray-300 hover:border-purple-500 text-gray-500 hover:text-purple-600'
                }`}>
                  <input
                    type="file"
                    multiple
                    className="hidden"
                    onChange={handleFileUpload}
                    accept="image/*,.pdf,.doc,.docx,.txt,.js,.jsx,.py,.html,.css,.json,.zip"
                  />
                  <span className="text-xs">📎 Upload screenshots, code, or files</span>
                </label>
                {files.length > 0 && (
                  <div className="mt-2 space-y-1">
                    {files.map((file, idx) => (
                      <div key={idx} className={`text-xs flex items-center justify-between p-1 rounded ${
                        isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700'
                      }`}>
                        <span>📎 {file.name}</span>
                        <button
                          onClick={() => setFiles(prev => prev.filter((_, i) => i !== idx))}
                          className="text-red-500 hover:text-red-700"
                        >
                          ✕
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            <form
              onSubmit={(e) => {
                e.preventDefault();
                sendMessage();
              }}
              className="flex gap-2"
            >
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder={
                  activeTab === 'chatbot' 
                    ? 'Ask about your project...' 
                    : 'Describe your progress...'
                }
                className={`flex-1 px-3 py-2 rounded-lg text-sm border ${
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                    : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                } focus:outline-none focus:ring-2 focus:ring-purple-500/20`}
                disabled={isLoading}
              />
              <button
                type="submit"
                disabled={isLoading || (!input.trim() && files.length === 0)}
                className="px-3 py-2 rounded-lg bg-purple-600 text-white hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </form>
          </div>
        </div>
      )}
    </>
  );
}

export default function ProjectLearningPage({ isDarkMode, setIsDarkMode }) {
  const location = useLocation();
  const navigate = useNavigate();
  const { currentUser, updateProjectProgress, getActiveProjects } = useAuth();
  const { project, prerequisites, isUnlocked, isFromSaved } = location.state || {};
  const [toast, setToast] = useState(null);
  const [currentStep, setCurrentStep] = useState(0);
  const [completedSteps, setCompletedSteps] = useState(new Set());
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [activeProject, setActiveProject] = useState(null);
  const [loading, setLoading] = useState(false);
  
  // State for compact tabs with popups
  const [activePopup, setActivePopup] = useState(null);
  const [popupContent, setPopupContent] = useState(null);
  const [isLoadingStepGuide, setIsLoadingStepGuide] = useState(false);
  
  // Track which steps have accessed the Step Process Guide
  const [visitedStepGuides, setVisitedStepGuides] = useState(new Set());

  // Persistence key for localStorage  
  const getStorageKey = useCallback(() => {
    const projectId = activeProject?.id || project?.id;
    const projectTitle = (activeProject?.title || project?.title || 'unknown').replace(/[^a-zA-Z0-9]/g, '-');
    
    if (currentUser && projectId) {
      return `project-learning-${currentUser.uid}-${projectId}`;
    } else if (currentUser) {
      return `project-learning-${currentUser.uid}-${projectTitle}`;
    }
    return `project-learning-guest-${projectTitle}`;
  }, [activeProject?.id, project?.id, activeProject?.title, project?.title, currentUser]);

  // Save state to localStorage
  const saveState = useCallback(() => {
    const state = {
      currentStep,
      completedSteps: Array.from(completedSteps),
      visitedStepGuides: Array.from(visitedStepGuides),
      timestamp: Date.now()
    };
    const storageKey = getStorageKey();
    
    console.log('Saving state for key:', storageKey);
    console.log('State to save:', state);
    
    localStorage.setItem(storageKey, JSON.stringify(state));
  }, [currentStep, completedSteps, visitedStepGuides, getStorageKey]);



  // Navigate to step with persistence
  const navigateToStep = useCallback((stepIndex) => {
    setCurrentStep(stepIndex);
    // Save to localStorage immediately
    const immediateState = {
      currentStep: stepIndex,
      completedSteps: Array.from(completedSteps),
      visitedStepGuides: Array.from(visitedStepGuides),
      timestamp: Date.now()
    };
    localStorage.setItem(getStorageKey(), JSON.stringify(immediateState));
    console.log('Step navigation: Saved state for step', stepIndex);
    
    // Save to Firebase if logged in
    if (currentUser && activeProject && activeProject.id) {
      updateProjectProgress(
        activeProject.id,
        Array.from(completedSteps),
        stepIndex
      ).then(() => {
        console.log('Step navigation: Firebase updated for step', stepIndex);
      }).catch(error => {
        console.error('Step navigation: Firebase save failed', error);
      });
    }
  }, [completedSteps, getStorageKey, currentUser, activeProject, updateProjectProgress]);

  // Debug function - can be called from browser console
  window.debugProjectState = () => {
    console.log('=== DEBUG PROJECT STATE ===');
    console.log('currentUser:', currentUser);
    console.log('project:', project);
    console.log('activeProject:', activeProject);
    console.log('currentStep:', currentStep);
    console.log('completedSteps:', Array.from(completedSteps));
    
    const projectId = activeProject?.id || project?.id;
    const projectTitle = (activeProject?.title || project?.title || 'unknown').replace(/[^a-zA-Z0-9]/g, '-');
    
    let storageKey;
    if (currentUser && projectId) {
      storageKey = `project-learning-${currentUser.uid}-${projectId}`;
    } else if (currentUser) {
      storageKey = `project-learning-${currentUser.uid}-${projectTitle}`;
    } else {
      storageKey = `project-learning-guest-${projectTitle}`;
    }
    
    console.log('Current storage key:', storageKey);
    console.log('Saved state:', localStorage.getItem(storageKey));
    
    // Check all localStorage keys that match our pattern
    console.log('All project learning keys in localStorage:');
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith('project-learning-')) {
        console.log(`  ${key}: ${localStorage.getItem(key)}`);
      }
    }
    console.log('=== END DEBUG ===');
  };

  useEffect(() => {
    if (!project || (!isUnlocked && !isFromSaved)) {
      navigate('/');
      return;
    }

    // Initialize project and load progress
    const initializeProject = async () => {
      console.log('Initializing project...');
      
      if (isFromSaved && currentUser) {
        // Coming from saved projects - load Firebase data first
        console.log('Loading from saved projects...');
        await loadActiveProject();
      } else {
        // Set active project first
        console.log('Setting active project...');
        setActiveProject(project);
        
        // Load state after a small delay to ensure activeProject is set
        setTimeout(() => {
          console.log('Loading state after activeProject is set...');
          
          // ALWAYS try localStorage first for all users (logged in or not)
          const projectId = project?.id;
          const projectTitle = (project?.title || 'unknown').replace(/[^a-zA-Z0-9]/g, '-');
          
          let storageKey;
          if (currentUser && projectId) {
            storageKey = `project-learning-${currentUser.uid}-${projectId}`;
          } else if (currentUser) {
            storageKey = `project-learning-${currentUser.uid}-${projectTitle}`;
          } else {
            storageKey = `project-learning-guest-${projectTitle}`;
          }
          
          const savedState = localStorage.getItem(storageKey);
          console.log('Checking localStorage with key:', storageKey);
          console.log('Found saved state:', savedState);
          
          let stateLoaded = false;
          if (savedState) {
            try {
              const state = JSON.parse(savedState);
              const age = Date.now() - state.timestamp;
              const isExpired = age > 24 * 60 * 60 * 1000;
              
              console.log('State age (hours):', Math.round(age / (60 * 60 * 1000)));
              console.log('Is expired:', isExpired);
              
              if (!isExpired) {
                console.log('Restoring state:', state);
                setCurrentStep(state.currentStep || 0);
                setCompletedSteps(new Set(state.completedSteps || []));
                setVisitedStepGuides(new Set(state.visitedStepGuides || []));
                stateLoaded = true;
              } else {
                console.log('State expired, removing...');
                localStorage.removeItem(storageKey);
              }
            } catch (error) {
              console.error('Failed to parse saved state:', error);
              localStorage.removeItem(storageKey);
            }
          }
          
          if (!stateLoaded) {
            // If no localStorage, try Firebase for logged in users
            if (currentUser && project.progress) {
              console.log('No localStorage found, using Firebase progress...');
              setCompletedSteps(new Set(project.progress.completedSteps || []));
              setCurrentStep(project.progress.currentStep || 0);
            } else {
              // Default values if no saved state anywhere
              console.log('No saved state found, using defaults...');
              setCompletedSteps(new Set());
              setCurrentStep(0);
              setVisitedStepGuides(new Set());
            }
          } else {
            console.log('Loaded state from localStorage successfully!');
          }
        }, 100); // Small delay to ensure state updates
      }
    };

    initializeProject();
  }, [project, isUnlocked, isFromSaved, navigate, currentUser]);

  // Save state whenever it changes - with debouncing
  useEffect(() => {
    // Only save if we have meaningful state (not initial load)
    if ((activeProject || project) && (currentStep > 0 || completedSteps.size > 0 || visitedStepGuides.size > 0)) {
      console.log('Auto-saving state due to changes...');
      saveState();
    }
  }, [currentStep, completedSteps, visitedStepGuides, activeProject, project, saveState]);

  const loadActiveProject = async () => {
    if (!currentUser || !project.id) return;
    
    setLoading(true);
    try {
      const activeProjects = await getActiveProjects();
      const foundProject = activeProjects.find(p => p.id === project.id);
      
      if (foundProject) {
        setActiveProject(foundProject);
        setCompletedSteps(new Set(foundProject.progress?.completedSteps || []));
        setCurrentStep(foundProject.progress?.currentStep || 0);
      } else {
        // Fallback to the project data we have and try loading from localStorage
        setActiveProject(project);
        
        // Generate storage key directly using project data
        const projectId = project?.id;
        const projectTitle = (project?.title || 'unknown').replace(/[^a-zA-Z0-9]/g, '-');
        
        let storageKey;
        if (currentUser && projectId) {
          storageKey = `project-learning-${currentUser.uid}-${projectId}`;
        } else if (currentUser) {
          storageKey = `project-learning-${currentUser.uid}-${projectTitle}`;
        } else {
          storageKey = `project-learning-guest-${projectTitle}`;
        }
        
        const savedState = localStorage.getItem(storageKey);
        let stateLoaded = false;
        
        if (savedState) {
          try {
            const state = JSON.parse(savedState);
            const age = Date.now() - state.timestamp;
            const isExpired = age > 24 * 60 * 60 * 1000;
            
            if (!isExpired) {
              setCurrentStep(state.currentStep || 0);
              setCompletedSteps(new Set(state.completedSteps || []));
              setVisitedStepGuides(new Set(state.visitedStepGuides || []));
              stateLoaded = true;
            } else {
              localStorage.removeItem(storageKey);
            }
          } catch (error) {
            console.error('Failed to parse saved state:', error);
            localStorage.removeItem(storageKey);
          }
        }
        
        if (!stateLoaded) {
          // Default values if no saved state
          setCompletedSteps(new Set());
          setCurrentStep(0);
          setVisitedStepGuides(new Set());
        }
      }
    } catch (error) {
      console.error('Error loading active project:', error);
      setActiveProject(project);
      
      // Generate storage key directly using project data
      const projectId = project?.id;
      const projectTitle = (project?.title || 'unknown').replace(/[^a-zA-Z0-9]/g, '-');
      
      let storageKey;
      if (currentUser && projectId) {
        storageKey = `project-learning-${currentUser.uid}-${projectId}`;
      } else if (currentUser) {
        storageKey = `project-learning-${currentUser.uid}-${projectTitle}`;
      } else {
        storageKey = `project-learning-guest-${projectTitle}`;
      }
      
      const savedState = localStorage.getItem(storageKey);
      let stateLoaded = false;
      
      if (savedState) {
        try {
          const state = JSON.parse(savedState);
          const age = Date.now() - state.timestamp;
          const isExpired = age > 24 * 60 * 60 * 1000;
          
          if (!isExpired) {
            setCurrentStep(state.currentStep || 0);
            setCompletedSteps(new Set(state.completedSteps || []));
            setVisitedStepGuides(new Set(state.visitedStepGuides || []));
            stateLoaded = true;
          } else {
            localStorage.removeItem(storageKey);
          }
        } catch (error) {
          console.error('Failed to parse saved state:', error);
          localStorage.removeItem(storageKey);
        }
      }
      
      if (!stateLoaded) {
        // Default values if no saved state
        setCompletedSteps(new Set());
        setCurrentStep(0);
        setVisitedStepGuides(new Set());
      }
    } finally {
      setLoading(false);
    }
  };

  const handleStepComplete = async (stepIndex) => {
    // Check if user has visited the Step Process Guide for this step
    if (!visitedStepGuides.has(stepIndex)) {
      setToast({ 
        message: "Please visit the Step Process Guide & AI Assistant before marking this step as complete!", 
        type: "warning" 
      });
      return;
    }

    const newCompletedSteps = new Set(completedSteps);
    if (newCompletedSteps.has(stepIndex)) {
      newCompletedSteps.delete(stepIndex);
    } else {
      newCompletedSteps.add(stepIndex);
    }
    
    // Update state immediately for instant UI feedback
    setCompletedSteps(newCompletedSteps);
    
    // Save to localStorage immediately for persistence
    const immediateState = {
      currentStep,
      completedSteps: Array.from(newCompletedSteps),
      visitedStepGuides: Array.from(visitedStepGuides),
      timestamp: Date.now()
    };
    localStorage.setItem(getStorageKey(), JSON.stringify(immediateState));

    // Save progress to Firebase if user is logged in and we have an active project
    if (currentUser && activeProject && activeProject.id) {
      try {
        const completedArray = Array.from(newCompletedSteps);
        const newCurrentStep = completedArray.length > 0 ? Math.max(...completedArray) + 1 : currentStep;
        
        await updateProjectProgress(
          activeProject.id, 
          completedArray, 
          newCurrentStep
        );
        
        setToast({ message: "Progress saved to cloud!", type: "success" });
      } catch (error) {
        console.error('Error saving progress to cloud:', error);
        setToast({ message: "Saved locally (cloud sync failed)", type: "warning" });
      }
    } else {
      // For guests, just show local save confirmation
      setToast({ message: "Progress saved locally!", type: "success" });
    }
  };

  // Handle popup content for compact tabs
  const handleTabClick = async (tabType, content) => {
    if (activePopup === tabType) {
      setActivePopup(null);
      setPopupContent(null);
      setIsLoadingStepGuide(false);
    } else {
      setActivePopup(tabType);
      setPopupContent(content);
      
      // Show loading state for step guide
      if (tabType === 'stepguide') {
        setIsLoadingStepGuide(true);
        
        // Mark current step as having visited the guide
        const newVisitedStepGuides = new Set(visitedStepGuides);
        newVisitedStepGuides.add(currentStep);
        setVisitedStepGuides(newVisitedStepGuides);
        
        // Simulate the time it takes for the StepAIBot to initialize and fetch process
        setTimeout(() => {
          setIsLoadingStepGuide(false);
        }, 2000); // Adjust timing as needed
      }
    }
  };

  const handleNextStep = () => {
    const nextStep = currentStep + 1;
    // Only allow navigation to next step if it's unlocked (previous step completed) or if it's the first step
    const isNextStepUnlocked = nextStep === 0 || completedSteps.has(nextStep - 1);
    if (nextStep < (activeProject?.steps?.length || project?.steps?.length || 0) && isNextStepUnlocked) {
      navigateToStep(nextStep);
    }
  };

  const handlePrevStep = () => {
    if (currentStep > 0) {
      const prevStep = currentStep - 1;
      navigateToStep(prevStep);
    }
  };

  const getProgressPercentage = () => {
    return Math.round((completedSteps.size / (activeProject?.steps?.length || project?.steps?.length || 1)) * 100);
  };

  const isCodingProject = (activeProject?.domain || project?.domain) === 'Coding';

  // Show loading while fetching active project data
  if (loading) {
    return (
      <div className={`min-h-screen flex items-center justify-center ${
        isDarkMode ? 'bg-gray-900' : 'bg-gray-50'
      }`}>
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className={`text-lg ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>Loading your project...</p>
        </div>
      </div>
    );
  }

  // Check if we have project data
  if (!project && !activeProject) {
    return (
      <div className={`min-h-screen flex items-center justify-center ${
        isDarkMode ? 'bg-gray-900' : 'bg-gray-50'
      }`}>
        <div className="text-center">
          <p className={`text-lg ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>No project data found.</p>
          <button
            onClick={() => navigate('/')}
            className="mt-4 px-6 py-2 rounded-lg bg-purple-600 text-white font-semibold hover:bg-purple-700 transition-colors"
          >
            Go Home
          </button>
        </div>
      </div>
    );
  }

  const currentProject = activeProject || project;

  return (
    <div className={`min-h-screen transition-all duration-500 ${
      isDarkMode
        ? 'bg-gradient-to-br from-gray-900 via-purple-900 to-blue-900'
        : 'bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50'
    }`}>
      {/* Header with authentication - Fixed positioning */}
      <div className="fixed top-4 left-4 right-4 flex justify-between items-center z-50">
        <div className="flex items-center gap-4">
      <DarkModeToggle isDark={isDarkMode} onToggle={() => setIsDarkMode(!isDarkMode)} />
        </div>
        
        <div className="flex items-center gap-4">
          {currentUser ? (
            <UserProfile isDarkMode={isDarkMode} />
          ) : (
            <button
              onClick={() => setShowLoginModal(true)}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                isDarkMode
                  ? 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'
                  : 'bg-white/50 text-gray-700 hover:bg-white/70'
              } backdrop-blur-lg`}
            >
              Sign In
            </button>
          )}
        </div>
      </div>

      {/* Login Modal */}
      <LoginModal 
        isOpen={showLoginModal} 
        onClose={() => setShowLoginModal(false)} 
        isDarkMode={isDarkMode} 
      />
      {toast && (
        <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />
      )}
      
      {/* Main Content - Add top padding to account for fixed header */}
      <div className="container mx-auto px-4 pt-20 pb-8 max-w-6xl">
        {/* Back Button */}
        <div className="mb-8">
          <button
            onClick={() => navigate(-1)}
            className={`mb-6 px-4 py-2 rounded-lg font-medium text-sm transition-colors ${
              isDarkMode
                ? 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50'
                : 'bg-white/50 text-gray-700 hover:bg-white/70'
            } backdrop-blur-lg`}
          >
            ← Back to Project Details
          </button>
          
          {/* Project Header Card */}
          <div className={`rounded-2xl shadow-xl p-6 ${isDarkMode ? 'bg-gray-800/90' : 'bg-white/90'} backdrop-blur-lg`}>
            <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4 mb-4">
              <div className="flex-1">
                <h1 className={`text-2xl lg:text-3xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                  🚀 {currentProject.title}
                </h1>
                <p className={`text-base lg:text-lg ${isDarkMode ? 'text-gray-300' : 'text-gray-700'} line-clamp-2`}>
                  {currentProject.description}
                </p>
              </div>
              
              {/* Progress Circle - Better positioning */}
              <div className="flex-shrink-0">
                <div className={`relative w-20 h-20 rounded-full border-4 ${
                  isDarkMode ? 'border-gray-600' : 'border-gray-300'
                } flex items-center justify-center`}>
                  <div 
                    className="absolute inset-0 rounded-full border-4 border-green-500 transition-all duration-500"
                    style={{
                      background: `conic-gradient(#10b981 ${getProgressPercentage() * 3.6}deg, transparent 0deg)`,
                      clipPath: 'circle(50%)'
                    }}
                  ></div>
                  <span className={`text-sm font-bold z-10 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                    {getProgressPercentage()}%
                  </span>
                </div>
              </div>
            </div>
            
            {/* Progress Bar */}
            <div className="mb-4">
              <div className="flex justify-between items-center mb-2">
                <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Progress: {completedSteps.size}/{currentProject.steps?.length || 0} steps completed
                </span>
              </div>
              <div className={`w-full h-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                <div 
                  className="h-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 transition-all duration-500"
                  style={{ width: `${getProgressPercentage()}%` }}
                ></div>
              </div>
            </div>

            {/* Quick Stats - Better spacing */}
            <div className="flex flex-wrap gap-3 text-sm">
              <span className={`inline-flex items-center gap-2 px-3 py-1 rounded-full ${isDarkMode ? 'bg-blue-900/30 text-blue-300' : 'bg-blue-100 text-blue-800'}`}>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {currentProject.timeEstimate}
              </span>
              <span className={`inline-flex items-center gap-2 px-3 py-1 rounded-full ${isDarkMode ? 'bg-purple-900/30 text-purple-300' : 'bg-purple-100 text-purple-800'}`}>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                </svg>
                {currentProject.domain}
              </span>
              <span className={`inline-flex items-center gap-2 px-3 py-1 rounded-full ${isDarkMode ? 'bg-green-900/30 text-green-300' : 'bg-green-100 text-green-800'}`}>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {currentProject.difficulty}
              </span>
            </div>
          </div>
        </div>

        {/* Main Grid Layout */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Sidebar - Steps Overview */}
          <div className="lg:col-span-1 order-2 lg:order-1">
            <div className={`rounded-2xl shadow-xl p-6 ${isDarkMode ? 'bg-gray-800/90' : 'bg-white/90'} backdrop-blur-lg sticky top-24 max-h-[calc(100vh-120px)] overflow-y-auto`}>
              <h2 className={`text-xl font-bold mb-4 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                📋 Implementation Steps
              </h2>
              
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {currentProject.steps?.map((step, index) => {
                  // Check if step is unlocked - first step is always unlocked, others unlock when previous step is completed
                  const isUnlocked = index === 0 || completedSteps.has(index - 1);
                  const isCompleted = completedSteps.has(index);
                  const isCurrent = currentStep === index;
                  
                  return (
                    <div key={index} className="relative">
                      <button
                        onClick={() => {
                          if (isUnlocked) {
                            navigateToStep(index);
                          }
                        }}
                        disabled={!isUnlocked}
                        className={`w-full text-left p-3 rounded-lg transition-all ${
                          !isUnlocked
                            ? (isDarkMode ? 'bg-gray-700/50 text-gray-500 cursor-not-allowed opacity-60' : 'bg-gray-100/50 text-gray-400 cursor-not-allowed opacity-60')
                            : isCurrent
                            ? (isDarkMode ? 'bg-purple-600 text-white' : 'bg-purple-100 text-purple-900')
                            : (isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-50 text-gray-700 hover:bg-gray-100')
                        }`}
                      >
                        <div className="flex items-center gap-3">
                          {/* Step status indicator */}
                          <div className="flex-shrink-0">
                            {isCompleted ? (
                              <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                                <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                              </div>
                            ) : !isUnlocked ? (
                              <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                                isDarkMode ? 'bg-gray-600 text-gray-400' : 'bg-gray-300 text-gray-500'
                              }`}>
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                </svg>
                              </div>
                            ) : (
                              <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                                isCurrent 
                                  ? 'border-white bg-white/20' 
                                  : isDarkMode ? 'border-gray-400 bg-gray-600' : 'border-gray-400 bg-white'
                              }`}>
                                <span className={`text-xs font-bold ${
                                  isCurrent ? 'text-white' : isDarkMode ? 'text-gray-300' : 'text-gray-600'
                                }`}>
                                  {index + 1}
                                </span>
                              </div>
                            )}
                          </div>
                          
                          {/* Step text */}
                          <div className="flex-1 min-w-0">
                            <span className={`text-sm font-medium block ${
                              !isUnlocked ? 'line-through' : ''
                            }`}>
                              {index + 1}. {step}
                            </span>
                            {!isUnlocked && index > 0 && (
                              <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>
                                Complete step {index} to unlock
                              </span>
                            )}
                          </div>
                          
                          {/* Lock/unlock indicator */}
                          {!isUnlocked && (
                            <div className="flex-shrink-0">
                              <svg className={`w-4 h-4 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                              </svg>
                            </div>
                          )}
                        </div>
                      </button>
                      
                      {/* Progress connector line */}
                      {index < currentProject.steps.length - 1 && (
                        <div className={`absolute left-6 top-12 w-0.5 h-4 ${
                          isCompleted 
                            ? 'bg-green-500' 
                            : isDarkMode ? 'bg-gray-600' : 'bg-gray-300'
                        }`}></div>
                      )}
                    </div>
                  );
                })}
              </div>

              {/* Compact Action Tabs */}
              <div className="mt-6 pt-4 border-t border-gray-300/20">
                <h3 className={`text-sm font-semibold mb-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                  Quick Actions
                </h3>
                <div className="grid grid-cols-2 gap-2">
                  {/* Resources Tab */}
                  <button
                    onClick={() => handleTabClick('resources', 'resources')}
                    className={`p-3 rounded-lg text-sm font-medium transition-all flex flex-col items-center gap-1 ${
                      activePopup === 'resources'
                        ? (isDarkMode ? 'bg-blue-600 text-white' : 'bg-blue-600 text-white')
                        : (isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-100 text-gray-700 hover:bg-gray-200')
                    }`}
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                    </svg>
                    Resources
                  </button>



                  {/* Prerequisites Tab */}
                  <button
                    onClick={() => handleTabClick('prereq', 'prerequisites')}
                    className={`p-3 rounded-lg text-sm font-medium transition-all flex flex-col items-center gap-1 ${
                      activePopup === 'prereq'
                        ? (isDarkMode ? 'bg-green-600 text-white' : 'bg-green-600 text-white')
                        : (isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-100 text-gray-700 hover:bg-gray-200')
                    }`}
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Prerequisites
                  </button>

                  {/* Code Tab (for coding projects) */}
                  {isCodingProject && (
                    <button
                      onClick={() => handleTabClick('code', 'code')}
                      className={`p-3 rounded-lg text-sm font-medium transition-all flex flex-col items-center gap-1 ${
                        activePopup === 'code'
                          ? (isDarkMode ? 'bg-orange-600 text-white' : 'bg-orange-600 text-white')
                          : (isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-100 text-gray-700 hover:bg-gray-200')
                      }`}
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                      </svg>
                      Code
                    </button>
                  )}
                </div>
              </div>

              {/* Progress Summary */}
              <div className={`mt-4 pt-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                <div className="flex items-center justify-between mb-2">
                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                    Overall Progress
                  </span>
                  <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                    {completedSteps.size}/{currentProject.steps?.length || 0}
                  </span>
                </div>
                <div className={`w-full h-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                  <div 
                    className="h-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 transition-all duration-500"
                    style={{ width: `${getProgressPercentage()}%` }}
                  ></div>
                </div>
                
                {/* Unlock status */}
                <div className="mt-3">
                  {currentProject.steps?.map((_, index) => {
                    const isUnlocked = index === 0 || completedSteps.has(index - 1);
                    if (!isUnlocked && index === completedSteps.size) {
                      return (
                        <div key={index} className={`text-xs flex items-center gap-2 ${
                          isDarkMode ? 'text-yellow-400' : 'text-yellow-600'
                        }`}>
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-3.586l6.879-6.879A6 6 0 0119 9z" />
                          </svg>
                          Complete current step to unlock next
                        </div>
                      );
                    }
                    return null;
                  })}
                </div>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-2 order-1 lg:order-2 relative">
            <div className={`rounded-2xl shadow-xl p-6 lg:p-8 ${isDarkMode ? 'bg-gray-800/90' : 'bg-white/90'} backdrop-blur-lg`}>
              {/* Current Step */}
              <div className="mb-8">
                {/* Step Header - Fixed Layout */}
                <div className="mb-6">
                  <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4 mb-4">
                    <div className="flex-1 min-w-0">
                      <h2 className={`text-xl lg:text-2xl font-bold mb-2 break-words ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                        Step {currentStep + 1}: {typeof (currentProject?.steps || project?.steps || [])[currentStep] === 'string' ? (currentProject?.steps || project?.steps || [])[currentStep] : (currentProject?.steps || project?.steps || [])[currentStep]?.title}
                      </h2>
                      {typeof (currentProject?.steps || project?.steps || [])[currentStep] === 'object' && (currentProject?.steps || project?.steps || [])[currentStep]?.description && (
                        <p className={`text-sm lg:text-base break-words ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                          {(currentProject?.steps || project?.steps || [])[currentStep].description}
                        </p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Step Content */}
                <div className={`p-6 rounded-lg ${isDarkMode ? 'bg-gray-700/50' : 'bg-gray-50'}`}>
                  <h3 className={`font-semibold mb-4 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                    📝 What you'll do in this step:
                  </h3>
                  <div className={`text-base leading-relaxed ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                    {typeof (currentProject?.steps || project?.steps || [])[currentStep] === 'string' ? (
                      <p>{(currentProject?.steps || project?.steps || [])[currentStep]}</p>
                    ) : (
                      <div>
                        <p className="mb-3">{(currentProject?.steps || project?.steps || [])[currentStep]?.description || (currentProject?.steps || project?.steps || [])[currentStep]?.title}</p>
                        {(currentProject?.steps || project?.steps || [])[currentStep]?.details && (
                          <ul className="list-disc list-inside space-y-1 ml-4">
                            {(currentProject?.steps || project?.steps || [])[currentStep].details.map((detail, idx) => (
                              <li key={idx}>{detail}</li>
                            ))}
                          </ul>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {/* Pro Tip Section - Improved */}
                  <div className={`mt-6 p-4 rounded-lg border-l-4 ${
                    isDarkMode 
                      ? 'bg-blue-900/30 border-blue-500 text-blue-200' 
                      : 'bg-blue-50 border-blue-400 text-blue-900'
                  }`}>
                    <h4 className="font-semibold mb-2 flex items-center">
                      <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                      </svg>
                      💡 Pro Tip
                    </h4>
                    <p className="text-sm">
                      {currentStep === 0 && "Start by setting up your development environment and gathering all necessary tools. Take your time with the initial setup!"}
                      {currentStep === (currentProject?.steps?.length || project?.steps?.length || 1) - 1 && "This is the final step! Take your time to test everything thoroughly and celebrate your achievement."}
                      {currentStep > 0 && currentStep < (currentProject?.steps?.length || project?.steps?.length || 1) - 1 && "Build incrementally and test each part before moving to the next step. Don't rush - quality over speed!"}
                    </p>
                  </div>
                </div>

                {/* Step Process Guide Tab Button */}
                <div className="mt-6">
                  <button
                    onClick={() => handleTabClick('stepguide', 'stepguide')}
                    disabled={isLoadingStepGuide}
                    className={`w-full p-4 rounded-lg text-left transition-all border-2 border-dashed relative ${
                      isLoadingStepGuide
                        ? (isDarkMode ? 'border-purple-600 bg-purple-900/40 text-purple-400 cursor-wait' : 'border-purple-400 bg-purple-100 text-purple-600 cursor-wait')
                        : activePopup === 'stepguide'
                        ? (isDarkMode ? 'border-purple-500 bg-purple-800/30 text-purple-200' : 'border-purple-500 bg-purple-200 text-purple-800')
                        : !visitedStepGuides.has(currentStep)
                        ? (isDarkMode ? 'border-orange-500 bg-orange-900/20 hover:bg-orange-900/30 text-orange-300 animate-pulse' : 'border-orange-400 bg-orange-50 hover:bg-orange-100 text-orange-700 animate-pulse')
                        : (isDarkMode ? 'border-purple-600 bg-purple-900/20 hover:bg-purple-900/30 text-purple-300' : 'border-purple-400 bg-purple-50 hover:bg-purple-100 text-purple-700')
                    }`}
                  >
                    {/* Required indicator */}
                    {!visitedStepGuides.has(currentStep) && (
                      <div className="absolute -top-2 -right-2 bg-orange-500 text-white text-xs font-bold px-2 py-1 rounded-full animate-bounce">
                        Required!
                      </div>
                    )}
                                          <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className={`p-2 rounded-lg ${
                            isDarkMode ? 'bg-purple-600' : 'bg-purple-500'
                          } text-white ${isLoadingStepGuide ? 'animate-pulse' : ''}`}>
                            {isLoadingStepGuide ? (
                              <svg className="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                              </svg>
                            ) : (
                              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                              </svg>
                            )}
                          </div>
                          <div>
                            <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                              {isLoadingStepGuide ? '⏳ Loading Step Guide...' : '🔄 Step Process Guide & AI Assistant'}
                              {!visitedStepGuides.has(currentStep) && !isLoadingStepGuide && (
                                <span className="ml-2 text-orange-500 text-xs font-bold">(Required to complete step)</span>
                              )}
                            </h3>
                            <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                              {isLoadingStepGuide 
                                ? 'Please wait while we prepare your personalized guide...' 
                                : !visitedStepGuides.has(currentStep)
                                ? 'You must visit this guide before you can mark the step as complete'
                                : 'Get detailed guidance, process steps, and AI help for this step'
                              }
                            </p>
                          </div>
                        </div>
                        {isLoadingStepGuide ? (
                          <div className="flex space-x-1">
                            <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'} animate-bounce`}></div>
                            <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'} animate-bounce`} style={{ animationDelay: '0.1s' }}></div>
                            <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'} animate-bounce`} style={{ animationDelay: '0.2s' }}></div>
                          </div>
                        ) : (
                          <svg className="w-5 h-5 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                        )}
                      </div>
                  </button>
                </div>
              </div>

              {/* Navigation - Improved Spacing */}
              <div className="flex justify-between items-center pt-6 border-t border-gray-300/20">
                <button
                  onClick={handlePrevStep}
                  disabled={currentStep === 0}
                  className={`px-6 py-3 rounded-lg font-medium transition-all flex items-center gap-2 ${
                    currentStep === 0
                      ? (isDarkMode ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-gray-200 text-gray-400 cursor-not-allowed')
                      : (isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-100 text-gray-700 hover:bg-gray-200')
                  }`}
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                  Previous
                </button>
                
                <div className="text-center">
                  <span className={`text-lg font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                    {currentStep + 1} of {(currentProject?.steps?.length || project?.steps?.length || 0)}
                  </span>
                  <div className={`text-sm ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>
                    {Math.round((currentStep + 1) / (currentProject?.steps?.length || project?.steps?.length || 1) * 100)}% complete
                  </div>
                </div>
                
                {/* Right side buttons */}
                <div className="flex items-center gap-3">
                  {/* Mark Complete Button */}
                  <button
                    onClick={() => handleStepComplete(currentStep)}
                    disabled={!visitedStepGuides.has(currentStep) && !completedSteps.has(currentStep)}
                    className={`px-4 py-3 rounded-lg font-medium text-sm transition-all flex items-center gap-2 ${
                      completedSteps.has(currentStep)
                        ? 'bg-green-600 text-white hover:bg-green-700 shadow-lg'
                        : !visitedStepGuides.has(currentStep)
                        ? (isDarkMode ? 'bg-gray-600/50 text-gray-500 cursor-not-allowed opacity-60' : 'bg-gray-200/50 text-gray-400 cursor-not-allowed opacity-60')
                        : (isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-100 text-gray-700 hover:bg-gray-200')
                    }`}
                    title={!visitedStepGuides.has(currentStep) && !completedSteps.has(currentStep) ? 'Visit Step Process Guide first!' : ''}
                  >
                    {completedSteps.has(currentStep) ? (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        Completed
                      </>
                    ) : !visitedStepGuides.has(currentStep) ? (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                        </svg>
                        Visit Guide First
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Mark Complete
                      </>
                    )}
                  </button>

                  {/* Next Button */}
                  {(() => {
                    const nextStep = currentStep + 1;
                    const isNextStepUnlocked = nextStep === 0 || completedSteps.has(nextStep - 1);
                    const isLastStep = currentStep === (currentProject?.steps?.length || project?.steps?.length || 1) - 1;
                    const isNextStepLocked = !isLastStep && !isNextStepUnlocked;
                    
                    return (
                      <button
                        onClick={handleNextStep}
                        disabled={isLastStep || isNextStepLocked}
                        className={`px-6 py-3 rounded-lg font-medium transition-all flex items-center gap-2 ${
                          isLastStep
                            ? (isDarkMode ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-gray-200 text-gray-400 cursor-not-allowed')
                            : isNextStepLocked
                            ? (isDarkMode ? 'bg-gray-700/50 text-gray-500 cursor-not-allowed opacity-60' : 'bg-gray-200/50 text-gray-400 cursor-not-allowed opacity-60')
                            : 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 shadow-lg'
                        }`}
                      >
                        {isNextStepLocked ? (
                          <>
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                            Locked
                          </>
                        ) : (
                          <>
                            Next
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                            </svg>
                          </>
                        )}
                      </button>
                    );
                  })()}
                </div>
              </div>
            </div>

            {/* Popup Overlay */}
            {activePopup && (
              <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4" onClick={() => setActivePopup(null)}>
                <div 
                  className={`w-full max-w-4xl max-h-[80vh] rounded-2xl shadow-2xl ${
                    isDarkMode ? 'bg-gray-800 border border-gray-700' : 'bg-white border border-gray-200'
                  } overflow-hidden`}
                  onClick={(e) => e.stopPropagation()}
                >
                  {/* Popup Header */}
                  <div className={`px-6 py-4 border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'} flex items-center justify-between`}>
                    <h3 className={`text-xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                      {activePopup === 'resources' && '📚 Learning Resources'}
                      {activePopup === 'stepguide' && '🔄 Step Process Guide & AI Assistant'}
                      {activePopup === 'prereq' && '✅ Prerequisites'}
                      {activePopup === 'code' && '💻 Starter Code'}
                    </h3>
                    <button
                      onClick={() => setActivePopup(null)}
                      className={`p-2 rounded-lg transition-colors ${
                        isDarkMode ? 'hover:bg-gray-700 text-gray-400' : 'hover:bg-gray-100 text-gray-600'
                      }`}
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>

                  {/* Popup Content */}
                  <div className="p-6 overflow-y-auto max-h-[calc(80vh-80px)]">
                    {activePopup === 'resources' && prerequisites && (
                      <div className="space-y-6">
                        {/* Resources Overview */}
                        <div className={`p-4 rounded-lg border-l-4 border-blue-500 ${
                          isDarkMode ? 'bg-blue-900/20 text-blue-200' : 'bg-blue-50 text-blue-800'
                        }`}>
                          <div className="flex items-center justify-between mb-2">
                            <h3 className="font-semibold text-lg">📚 Learning Resources Hub</h3>
                            <div className="flex gap-2">
                              <button
                                onClick={() => {
                                  const allResources = prerequisites.prerequisites
                                    .flatMap(cat => cat.items)
                                    .flatMap(item => item.resources || [])
                                    .map(res => `${res.title}: ${res.url}`)
                                    .join('\n');
                                  navigator.clipboard.writeText(`Learning Resources for ${currentProject?.title || project?.title}:\n\n${allResources}`);
                                  setToast({ message: "All resource links copied to clipboard!", type: "success" });
                                }}
                                className={`px-3 py-1 rounded-lg text-xs font-medium transition-all flex items-center gap-1 ${
                                  isDarkMode ? 'bg-blue-700 text-blue-200 hover:bg-blue-600' : 'bg-blue-600 text-white hover:bg-blue-700'
                                }`}
                              >
                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                                Copy All Links
                              </button>
                              <button
                                onClick={() => {
                                  const allResources = prerequisites.prerequisites
                                    .flatMap(cat => cat.items)
                                    .flatMap(item => item.resources || []);
                                  allResources.forEach((res, idx) => {
                                    setTimeout(() => {
                                      window.open(res.url, '_blank');
                                    }, idx * 500); // Stagger opening to avoid popup blocking
                                  });
                                  setToast({ message: `Opening ${allResources.length} resources...`, type: "info" });
                                }}
                                className={`px-3 py-1 rounded-lg text-xs font-medium transition-all flex items-center gap-1 ${
                                  isDarkMode ? 'bg-green-700 text-green-200 hover:bg-green-600' : 'bg-green-600 text-white hover:bg-green-700'
                                }`}
                              >
                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                </svg>
                                Open All
                              </button>
                            </div>
                          </div>
                          <p className="text-sm opacity-90">
                            Curated learning materials for this project. Click resources to open, or use bulk actions above.
                          </p>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {prerequisites.prerequisites.map((category, categoryIndex) => (
                            category.items.map((item, itemIndex) => (
                              <ExpandableResourceCard
                                key={`${categoryIndex}-${itemIndex}`}
                                item={item}
                                isDarkMode={isDarkMode}
                              />
                            ))
                          ))}
                        </div>

                        {/* Resource Categories Summary */}
                        <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/30' : 'bg-gray-100'}`}>
                          <h4 className={`font-semibold mb-3 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                            📊 Resource Categories
                          </h4>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            {(() => {
                              const resourceTypes = {};
                              prerequisites.prerequisites.forEach(cat => {
                                cat.items.forEach(item => {
                                  if (item.resources) {
                                    item.resources.forEach(res => {
                                      resourceTypes[res.type] = (resourceTypes[res.type] || 0) + 1;
                                    });
                                  }
                                });
                              });
                              
                              return Object.entries(resourceTypes).map(([type, count]) => (
                                <div key={type} className={`text-center p-3 rounded-lg ${
                                  isDarkMode ? 'bg-gray-600/50' : 'bg-white'
                                }`}>
                                  <div className="text-2xl mb-1">
                                    {type === 'YouTube' && '🎥'}
                                    {type === 'Documentation' && '📖'}
                                    {type === 'Website' && '🌐'}
                                    {type === 'Course' && '🎓'}
                                    {!['YouTube', 'Documentation', 'Website', 'Course'].includes(type) && '📄'}
                                  </div>
                                  <div className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}>
                                    {type}
                                  </div>
                                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                    {count} resource{count !== 1 ? 's' : ''}
                                  </div>
                                </div>
                              ));
                            })()}
                          </div>
                        </div>
                      </div>
                    )}

                    {activePopup === 'stepguide' && (
                      <div>
                        {isLoadingStepGuide ? (
                          <div className="flex flex-col items-center justify-center py-16">
                            {/* Animated Loading Icon */}
                            <div className="relative mb-8">
                              {/* Outer rotating ring */}
                              <div className={`w-20 h-20 rounded-full border-4 border-t-purple-600 border-r-purple-400 border-b-purple-200 border-l-purple-100 animate-spin ${
                                isDarkMode ? 'opacity-80' : 'opacity-90'
                              }`}></div>
                              
                              {/* Inner pulsing circle */}
                              <div className={`absolute inset-4 rounded-full ${
                                isDarkMode ? 'bg-purple-600' : 'bg-purple-500'
                              } animate-pulse flex items-center justify-center`}>
                                <svg className="w-6 h-6 text-white animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                </svg>
                              </div>
                              
                              {/* Sparkle effects */}
                              <div className="absolute -top-2 -right-2 w-4 h-4 bg-yellow-400 rounded-full animate-ping opacity-75"></div>
                              <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-blue-400 rounded-full animate-ping opacity-75" style={{ animationDelay: '0.5s' }}></div>
                              <div className="absolute top-1/2 -right-3 w-2 h-2 bg-green-400 rounded-full animate-ping opacity-75" style={{ animationDelay: '1s' }}></div>
                            </div>
                            
                            {/* Loading Text */}
                            <div className="text-center">
                              <h3 className={`text-xl font-bold mb-3 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                🔄 Preparing Your Step Guide
                              </h3>
                              <div className="flex flex-col space-y-2">
                                <div className={`text-base ${isDarkMode ? 'text-purple-300' : 'text-purple-700'} font-medium`}>
                                  <span className="inline-flex items-center">
                                    <span className="animate-pulse">🧠</span>
                                    <span className="ml-2">AI is analyzing your current step...</span>
                                  </span>
                                </div>
                                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                  <span className="inline-flex items-center">
                                    <span className="animate-pulse">📝</span>
                                    <span className="ml-2">Generating personalized process guide...</span>
                                  </span>
                                </div>
                                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                  <span className="inline-flex items-center">
                                    <span className="animate-pulse">🚀</span>
                                    <span className="ml-2">Setting up interactive chat assistant...</span>
                                  </span>
                                </div>
                              </div>
                              
                              {/* Progress dots */}
                              <div className="flex justify-center items-center mt-6 space-x-2">
                                <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'} animate-bounce`}></div>
                                <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'} animate-bounce`} style={{ animationDelay: '0.1s' }}></div>
                                <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'} animate-bounce`} style={{ animationDelay: '0.2s' }}></div>
                                <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'} animate-bounce`} style={{ animationDelay: '0.3s' }}></div>
                                <div className={`w-2 h-2 rounded-full ${isDarkMode ? 'bg-purple-400' : 'bg-purple-500'} animate-bounce`} style={{ animationDelay: '0.4s' }}></div>
                              </div>
                              
                              {/* Tip */}
                              <div className={`mt-6 p-4 rounded-lg ${
                                isDarkMode ? 'bg-blue-900/30 text-blue-200' : 'bg-blue-50 text-blue-800'
                              } border-l-4 border-blue-500`}>
                                <div className="flex items-start">
                                  <svg className="w-5 h-5 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                  </svg>
                                  <div>
                                    <p className="text-sm font-medium">💡 Pro Tip</p>
                                    <p className="text-xs mt-1 opacity-90">The AI will provide step-by-step guidance, code examples, and answer any questions you have about this specific step!</p>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        ) : (
                          <StepAIBot 
                            project={currentProject || project} 
                            currentStepIndex={currentStep} 
                            previousSteps={(currentProject?.steps || project?.steps || []).slice(0, currentStep)} 
                            isDarkMode={isDarkMode} 
                          />
                        )}
                      </div>
                    )}

                    {activePopup === 'prereq' && prerequisites && (
                      <div className="space-y-6">
                        {/* Prerequisites Overview */}
                        <div className={`p-4 rounded-lg border-l-4 border-green-500 ${
                          isDarkMode ? 'bg-green-900/20 text-green-200' : 'bg-green-50 text-green-800'
                        }`}>
                          <div className="flex items-center justify-between mb-2">
                            <h3 className="font-semibold text-lg">📋 Prerequisites Checklist</h3>
                            <button
                              onClick={() => {
                                const checklistText = prerequisites.prerequisites
                                  .map(cat => `${cat.category}:\n${cat.items.map(item => `- ${item.title}`).join('\n')}`)
                                  .join('\n\n');
                                navigator.clipboard.writeText(`Prerequisites for ${currentProject?.title || project?.title}:\n\n${checklistText}`);
                                setToast({ message: "Prerequisites checklist copied to clipboard!", type: "success" });
                              }}
                              className={`px-3 py-1 rounded-lg text-xs font-medium transition-all flex items-center gap-1 ${
                                isDarkMode ? 'bg-green-700 text-green-200 hover:bg-green-600' : 'bg-green-600 text-white hover:bg-green-700'
                              }`}
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                              </svg>
                              Copy List
                            </button>
                          </div>
                          <p className="text-sm opacity-90">
                            Make sure you have these skills and tools before starting. Click items to mark as completed.
                          </p>
                        </div>

                        {prerequisites.prerequisites.map((category, idx) => (
                          <div key={idx} className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/50' : 'bg-gray-50'}`}>
                            <div className="flex items-center justify-between mb-3">
                              <h4 className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                {category.category}
                              </h4>
                              <span className={`text-xs px-2 py-1 rounded ${
                                isDarkMode ? 'bg-blue-900/30 text-blue-300' : 'bg-blue-100 text-blue-800'
                              }`}>
                                {category.items.length} items
                              </span>
                            </div>
                            <div className="space-y-2">
                              {category.items.map((item, itemIdx) => (
                                <div 
                                  key={itemIdx} 
                                  className={`p-3 rounded border cursor-pointer transition-all hover:scale-[1.02] ${
                                    isDarkMode ? 'bg-gray-600/30 border-gray-600 hover:bg-gray-600/50' : 'bg-white border-gray-200 hover:shadow-md'
                                  }`}
                                  onClick={() => {
                                    // Toggle completion state (you could store this in local state)
                                    const element = document.getElementById(`prereq-${idx}-${itemIdx}`);
                                    if (element.textContent.startsWith('✓')) {
                                      element.textContent = element.textContent.replace('✓', '⭕');
                                      element.style.opacity = '0.6';
                                    } else {
                                      element.textContent = element.textContent.replace('⭕', '✓');
                                      element.style.opacity = '1';
                                    }
                                  }}
                                >
                                  <h5 
                                    id={`prereq-${idx}-${itemIdx}`}
                                    className={`font-medium transition-all ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}
                                  >
                                    ✓ {item.title}
                                  </h5>
                                  <p className={`text-sm mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                    {item.description}
                                  </p>
                                  
                                  {/* Action buttons for each prerequisite */}
                                  <div className="flex gap-2 mt-3">
                                    {item.resources && item.resources.map((resource, resIdx) => (
                                      <a
                                        key={resIdx}
                                        href={resource.url}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        onClick={(e) => e.stopPropagation()}
                                        className={`inline-flex items-center gap-1 px-2 py-1 text-xs rounded transition-all hover:scale-105 ${
                                          resource.type === 'Documentation'
                                            ? (isDarkMode ? 'bg-blue-900/50 text-blue-300 hover:bg-blue-800/50' : 'bg-blue-100 text-blue-800 hover:bg-blue-200')
                                            : resource.type === 'Tutorial'
                                            ? (isDarkMode ? 'bg-green-900/50 text-green-300 hover:bg-green-800/50' : 'bg-green-100 text-green-800 hover:bg-green-200')
                                            : (isDarkMode ? 'bg-purple-900/50 text-purple-300 hover:bg-purple-800/50' : 'bg-purple-100 text-purple-800 hover:bg-purple-200')
                                        }`}
                                      >
                                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                        </svg>
                                        {resource.title}
                                      </a>
                                    ))}
                                    
                                    {/* Quick search button */}
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        window.open(`https://www.google.com/search?q=${encodeURIComponent(item.title + ' tutorial')}`, '_blank');
                                      }}
                                      className={`inline-flex items-center gap-1 px-2 py-1 text-xs rounded transition-all hover:scale-105 ${
                                        isDarkMode ? 'bg-gray-600 text-gray-300 hover:bg-gray-500' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                      }`}
                                    >
                                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                      </svg>
                                      Search
                                    </button>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        ))}
                        
                        {/* Progress Summary */}
                        <div className={`p-4 rounded-lg border-l-4 border-purple-500 ${
                          isDarkMode ? 'bg-purple-900/20 text-purple-200' : 'bg-purple-50 text-purple-800'
                        }`}>
                          <h4 className="font-semibold mb-2">💡 Quick Tips</h4>
                          <ul className="text-sm space-y-1 opacity-90">
                            <li>• Click on any prerequisite to mark it as completed</li>
                            <li>• Use the resource links to quickly access learning materials</li>
                            <li>• Search button opens Google for additional tutorials</li>
                            <li>• Copy the checklist to save it for later reference</li>
                          </ul>
                        </div>
                      </div>
                    )}

                    {activePopup === 'code' && isCodingProject && (currentProject?.starterCode || project?.starterCode) && (
                      <div className="space-y-6">
                        {/* Code Overview */}
                        <div className={`p-4 rounded-lg border-l-4 border-orange-500 ${
                          isDarkMode ? 'bg-orange-900/20 text-orange-200' : 'bg-orange-50 text-orange-800'
                        }`}>
                          <div className="flex items-center justify-between mb-2">
                            <h3 className="font-semibold text-lg">💻 Starter Code & Resources</h3>
                            <div className="flex gap-2">
                              <button
                                onClick={() => {
                                  const codeWithComments = `/*
${currentProject?.title || project?.title} - Starter Code
Generated by BuildNow AI Learning Platform
Step: ${currentStep + 1}

Instructions:
1. Copy this code to your IDE
2. Follow the step-by-step implementation guide
3. Modify and extend as needed for your project

Happy coding! 🚀
*/

${currentProject?.starterCode || project?.starterCode || ''}`;
                                  navigator.clipboard.writeText(codeWithComments);
                                  setToast({ message: "Enhanced code copied with comments!", type: "success" });
                                }}
                                className={`px-3 py-1 rounded-lg text-xs font-medium transition-all flex items-center gap-1 ${
                                  isDarkMode ? 'bg-orange-700 text-orange-200 hover:bg-orange-600' : 'bg-orange-600 text-white hover:bg-orange-700'
                                }`}
                              >
                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                                Copy Enhanced
                              </button>
                              <button
                                onClick={() => {
                                  const blob = new Blob([currentProject?.starterCode || project?.starterCode || ''], { type: 'text/plain' });
                                  const url = URL.createObjectURL(blob);
                                  const a = document.createElement('a');
                                  a.href = url;
                                  a.download = `${(currentProject?.title || project?.title || 'project').toLowerCase().replace(/\s+/g, '-')}-starter.js`;
                                  a.click();
                                  URL.revokeObjectURL(url);
                                  setToast({ message: "Code downloaded as file!", type: "success" });
                                }}
                                className={`px-3 py-1 rounded-lg text-xs font-medium transition-all flex items-center gap-1 ${
                                  isDarkMode ? 'bg-blue-700 text-blue-200 hover:bg-blue-600' : 'bg-blue-600 text-white hover:bg-blue-700'
                                }`}
                              >
                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                </svg>
                                Download
                              </button>
                            </div>
                          </div>
                          <p className="text-sm opacity-90">
                            Ready-to-use starter code for your project. Copy, download, or enhance with comments.
                          </p>
                        </div>

                        {/* Code Block with Syntax Highlighting */}
                        <div className={`rounded-lg border ${isDarkMode ? 'border-gray-700' : 'border-gray-200'} overflow-hidden`}>
                          <div className={`px-4 py-2 border-b flex items-center justify-between ${
                            isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-200'
                          }`}>
                            <div className="flex items-center gap-2">
                              <div className="flex gap-1">
                                <div className="w-3 h-3 rounded-full bg-red-500"></div>
                                <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
                                <div className="w-3 h-3 rounded-full bg-green-500"></div>
                              </div>
                              <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                                {(currentProject?.title || project?.title || 'project').toLowerCase().replace(/\s+/g, '-')}-starter.js
                              </span>
                            </div>
                            <div className="flex gap-2">
                              <button
                                onClick={() => {
                                  navigator.clipboard.writeText(currentProject?.starterCode || project?.starterCode || '');
                                  setToast({ message: "Code copied to clipboard!", type: "success" });
                                }}
                                className={`px-2 py-1 rounded text-xs transition-all hover:scale-105 ${
                                  isDarkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                }`}
                              >
                                📋 Copy
                              </button>
                            </div>
                          </div>
                          <pre className={`text-sm p-4 overflow-x-auto ${
                            isDarkMode ? 'bg-gray-900 text-gray-300' : 'bg-gray-50 text-gray-800'
                          }`}>
                            <code>{currentProject?.starterCode || project?.starterCode}</code>
                          </pre>
                        </div>

                        {/* Code Actions */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <button
                            onClick={() => {
                              const repl = `https://repl.it/languages/javascript`;
                              window.open(repl, '_blank');
                              setToast({ message: "Opening online IDE...", type: "info" });
                            }}
                            className={`p-4 rounded-lg border-2 border-dashed transition-all hover:scale-105 ${
                              isDarkMode ? 'border-green-600 bg-green-900/20 text-green-300 hover:bg-green-900/30' : 'border-green-500 bg-green-50 text-green-700 hover:bg-green-100'
                            }`}
                          >
                            <div className="text-2xl mb-2">🌐</div>
                            <div className="font-semibold mb-1">Online IDE</div>
                            <div className="text-xs opacity-75">Test code in browser</div>
                          </button>

                          <button
                            onClick={() => {
                              window.open(`https://codesandbox.io/s/new`, '_blank');
                              setToast({ message: "Opening CodeSandbox...", type: "info" });
                            }}
                            className={`p-4 rounded-lg border-2 border-dashed transition-all hover:scale-105 ${
                              isDarkMode ? 'border-blue-600 bg-blue-900/20 text-blue-300 hover:bg-blue-900/30' : 'border-blue-500 bg-blue-50 text-blue-700 hover:bg-blue-100'
                            }`}
                          >
                            <div className="text-2xl mb-2">📦</div>
                            <div className="font-semibold mb-1">CodeSandbox</div>
                            <div className="text-xs opacity-75">Full dev environment</div>
                          </button>

                          <button
                            onClick={() => {
                              const vscodeUrl = `vscode://file/${encodeURIComponent('starter-code.js')}`;
                              window.location.href = vscodeUrl;
                              setToast({ message: "Opening in VS Code...", type: "info" });
                            }}
                            className={`p-4 rounded-lg border-2 border-dashed transition-all hover:scale-105 ${
                              isDarkMode ? 'border-purple-600 bg-purple-900/20 text-purple-300 hover:bg-purple-900/30' : 'border-purple-500 bg-purple-50 text-purple-700 hover:bg-purple-100'
                            }`}
                          >
                            <div className="text-2xl mb-2">💼</div>
                            <div className="font-semibold mb-1">VS Code</div>
                            <div className="text-xs opacity-75">Open in local editor</div>
                          </button>
                        </div>

                        {/* Code Analysis */}
                        <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/30' : 'bg-gray-100'}`}>
                          <h4 className={`font-semibold mb-3 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                            📊 Code Analysis
                          </h4>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div className={`text-center p-3 rounded-lg ${isDarkMode ? 'bg-gray-600/50' : 'bg-white'}`}>
                              <div className="text-xl mb-1">📏</div>
                              <div className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}>
                                Lines
                              </div>
                              <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                {(currentProject?.starterCode || project?.starterCode || '').split('\n').length}
                              </div>
                            </div>
                            <div className={`text-center p-3 rounded-lg ${isDarkMode ? 'bg-gray-600/50' : 'bg-white'}`}>
                              <div className="text-xl mb-1">🔤</div>
                              <div className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}>
                                Characters
                              </div>
                              <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                {(currentProject?.starterCode || project?.starterCode || '').length}
                              </div>
                            </div>
                            <div className={`text-center p-3 rounded-lg ${isDarkMode ? 'bg-gray-600/50' : 'bg-white'}`}>
                              <div className="text-xl mb-1">⚡</div>
                              <div className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}>
                                Complexity
                              </div>
                              <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                {(currentProject?.starterCode || project?.starterCode || '').includes('function') ? 'Medium' : 'Simple'}
                              </div>
                            </div>
                            <div className={`text-center p-3 rounded-lg ${isDarkMode ? 'bg-gray-600/50' : 'bg-white'}`}>
                              <div className="text-xl mb-1">🎯</div>
                              <div className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}>
                                Type
                              </div>
                              <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                JavaScript
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Default content for invalid popup types */}
                    {(!activePopup || !['resources', 'stepguide', 'prereq', 'code'].includes(activePopup)) && (
                      <div className="text-center py-8">
                        <p className={`text-lg ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                          Content not available for "{popupContent || activePopup}"
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Corner Chatbot */}
      <CornerChatbot 
        project={currentProject} 
        isDarkMode={isDarkMode} 
        completedSteps={completedSteps} 
      />
    </div>
  );
} 